/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IAddressesRegistry,
  IAddressesRegistryInterface,
} from "../../../src/interfaces/IAddressesRegistry";

const _abi = [
  {
    inputs: [],
    name: "CCR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "LIQUIDATION_PENALTY_REDISTRIBUTION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "LIQUIDATION_PENALTY_SP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "MCR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "SCR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "activePool",
    outputs: [
      {
        internalType: "contract IActivePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "boldToken",
    outputs: [
      {
        internalType: "contract IBoldToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "borrowerOperations",
    outputs: [
      {
        internalType: "contract IBorrowerOperations",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collSurplusPool",
    outputs: [
      {
        internalType: "contract ICollSurplusPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralRegistry",
    outputs: [
      {
        internalType: "contract ICollateralRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "defaultPool",
    outputs: [
      {
        internalType: "contract IDefaultPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasPoolAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hintHelpers",
    outputs: [
      {
        internalType: "contract IHintHelpers",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interestRouter",
    outputs: [
      {
        internalType: "contract IInterestRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "metadataNFT",
    outputs: [
      {
        internalType: "contract IMetadataNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiTroveGetter",
    outputs: [
      {
        internalType: "contract IMultiTroveGetter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract IPriceFeed",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20Metadata",
            name: "collToken",
            type: "address",
          },
          {
            internalType: "contract IBorrowerOperations",
            name: "borrowerOperations",
            type: "address",
          },
          {
            internalType: "contract ITroveManager",
            name: "troveManager",
            type: "address",
          },
          {
            internalType: "contract ITroveNFT",
            name: "troveNFT",
            type: "address",
          },
          {
            internalType: "contract IMetadataNFT",
            name: "metadataNFT",
            type: "address",
          },
          {
            internalType: "contract IStabilityPool",
            name: "stabilityPool",
            type: "address",
          },
          {
            internalType: "contract IPriceFeed",
            name: "priceFeed",
            type: "address",
          },
          {
            internalType: "contract IActivePool",
            name: "activePool",
            type: "address",
          },
          {
            internalType: "contract IDefaultPool",
            name: "defaultPool",
            type: "address",
          },
          {
            internalType: "address",
            name: "gasPoolAddress",
            type: "address",
          },
          {
            internalType: "contract ICollSurplusPool",
            name: "collSurplusPool",
            type: "address",
          },
          {
            internalType: "contract ISortedTroves",
            name: "sortedTroves",
            type: "address",
          },
          {
            internalType: "contract IInterestRouter",
            name: "interestRouter",
            type: "address",
          },
          {
            internalType: "contract IHintHelpers",
            name: "hintHelpers",
            type: "address",
          },
          {
            internalType: "contract IMultiTroveGetter",
            name: "multiTroveGetter",
            type: "address",
          },
          {
            internalType: "contract ICollateralRegistry",
            name: "collateralRegistry",
            type: "address",
          },
          {
            internalType: "contract IBoldToken",
            name: "boldToken",
            type: "address",
          },
          {
            internalType: "contract IWETH",
            name: "WETH",
            type: "address",
          },
        ],
        internalType: "struct IAddressesRegistry.AddressVars",
        name: "_vars",
        type: "tuple",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sortedTroves",
    outputs: [
      {
        internalType: "contract ISortedTroves",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stabilityPool",
    outputs: [
      {
        internalType: "contract IStabilityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "troveManager",
    outputs: [
      {
        internalType: "contract ITroveManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "troveNFT",
    outputs: [
      {
        internalType: "contract ITroveNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IAddressesRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IAddressesRegistryInterface {
    return new Interface(_abi) as IAddressesRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IAddressesRegistry {
    return new Contract(address, _abi, runner) as unknown as IAddressesRegistry;
  }
}
