/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMultiTroveGetter {
  export type DebtPerInterestRateStruct = {
    interestBatchManager: AddressLike;
    interestRate: BigNumberish;
    debt: BigNumberish;
  };

  export type DebtPerInterestRateStructOutput = [
    interestBatchManager: string,
    interestRate: bigint,
    debt: bigint
  ] & { interestBatchManager: string; interestRate: bigint; debt: bigint };

  export type CombinedTroveDataStruct = {
    id: BigNumberish;
    debt: BigNumberish;
    coll: BigNumberish;
    stake: BigNumberish;
    annualInterestRate: BigNumberish;
    lastDebtUpdateTime: BigNumberish;
    lastInterestRateAdjTime: BigNumberish;
    interestBatchManager: AddressLike;
    batchDebtShares: BigNumberish;
    batchCollShares: BigNumberish;
    snapshotETH: BigNumberish;
    snapshotBoldDebt: BigNumberish;
  };

  export type CombinedTroveDataStructOutput = [
    id: bigint,
    debt: bigint,
    coll: bigint,
    stake: bigint,
    annualInterestRate: bigint,
    lastDebtUpdateTime: bigint,
    lastInterestRateAdjTime: bigint,
    interestBatchManager: string,
    batchDebtShares: bigint,
    batchCollShares: bigint,
    snapshotETH: bigint,
    snapshotBoldDebt: bigint
  ] & {
    id: bigint;
    debt: bigint;
    coll: bigint;
    stake: bigint;
    annualInterestRate: bigint;
    lastDebtUpdateTime: bigint;
    lastInterestRateAdjTime: bigint;
    interestBatchManager: string;
    batchDebtShares: bigint;
    batchCollShares: bigint;
    snapshotETH: bigint;
    snapshotBoldDebt: bigint;
  };
}

export interface IMultiTroveGetterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getDebtPerInterestRateAscending"
      | "getMultipleSortedTroves"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDebtPerInterestRateAscending",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleSortedTroves",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDebtPerInterestRateAscending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleSortedTroves",
    data: BytesLike
  ): Result;
}

export interface IMultiTroveGetter extends BaseContract {
  connect(runner?: ContractRunner | null): IMultiTroveGetter;
  waitForDeployment(): Promise<this>;

  interface: IMultiTroveGetterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDebtPerInterestRateAscending: TypedContractMethod<
    [
      _collIndex: BigNumberish,
      _startId: BigNumberish,
      _maxIterations: BigNumberish
    ],
    [
      [IMultiTroveGetter.DebtPerInterestRateStructOutput[], bigint] & {
        currId: bigint;
      }
    ],
    "view"
  >;

  getMultipleSortedTroves: TypedContractMethod<
    [_collIndex: BigNumberish, _startIdx: BigNumberish, _count: BigNumberish],
    [IMultiTroveGetter.CombinedTroveDataStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDebtPerInterestRateAscending"
  ): TypedContractMethod<
    [
      _collIndex: BigNumberish,
      _startId: BigNumberish,
      _maxIterations: BigNumberish
    ],
    [
      [IMultiTroveGetter.DebtPerInterestRateStructOutput[], bigint] & {
        currId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultipleSortedTroves"
  ): TypedContractMethod<
    [_collIndex: BigNumberish, _startIdx: BigNumberish, _count: BigNumberish],
    [IMultiTroveGetter.CombinedTroveDataStructOutput[]],
    "view"
  >;

  filters: {};
}
