/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAddressesRegistry {
  export type AddressVarsStruct = {
    collToken: AddressLike;
    borrowerOperations: AddressLike;
    troveManager: AddressLike;
    troveNFT: AddressLike;
    metadataNFT: AddressLike;
    stabilityPool: AddressLike;
    priceFeed: AddressLike;
    activePool: AddressLike;
    defaultPool: AddressLike;
    gasPoolAddress: AddressLike;
    collSurplusPool: AddressLike;
    sortedTroves: AddressLike;
    interestRouter: AddressLike;
    hintHelpers: AddressLike;
    multiTroveGetter: AddressLike;
    collateralRegistry: AddressLike;
    boldToken: AddressLike;
    WETH: AddressLike;
  };

  export type AddressVarsStructOutput = [
    collToken: string,
    borrowerOperations: string,
    troveManager: string,
    troveNFT: string,
    metadataNFT: string,
    stabilityPool: string,
    priceFeed: string,
    activePool: string,
    defaultPool: string,
    gasPoolAddress: string,
    collSurplusPool: string,
    sortedTroves: string,
    interestRouter: string,
    hintHelpers: string,
    multiTroveGetter: string,
    collateralRegistry: string,
    boldToken: string,
    WETH: string
  ] & {
    collToken: string;
    borrowerOperations: string;
    troveManager: string;
    troveNFT: string;
    metadataNFT: string;
    stabilityPool: string;
    priceFeed: string;
    activePool: string;
    defaultPool: string;
    gasPoolAddress: string;
    collSurplusPool: string;
    sortedTroves: string;
    interestRouter: string;
    hintHelpers: string;
    multiTroveGetter: string;
    collateralRegistry: string;
    boldToken: string;
    WETH: string;
  };
}

export interface IAddressesRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CCR"
      | "LIQUIDATION_PENALTY_REDISTRIBUTION"
      | "LIQUIDATION_PENALTY_SP"
      | "MCR"
      | "SCR"
      | "WETH"
      | "activePool"
      | "boldToken"
      | "borrowerOperations"
      | "collSurplusPool"
      | "collToken"
      | "collateralRegistry"
      | "defaultPool"
      | "gasPoolAddress"
      | "hintHelpers"
      | "interestRouter"
      | "metadataNFT"
      | "multiTroveGetter"
      | "priceFeed"
      | "setAddresses"
      | "sortedTroves"
      | "stabilityPool"
      | "troveManager"
      | "troveNFT"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY_REDISTRIBUTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_PENALTY_SP",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "SCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collSurplusPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "collToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hintHelpers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiTroveGetter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [IAddressesRegistry.AddressVarsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "troveNFT", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY_REDISTRIBUTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_PENALTY_SP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boldToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collSurplusPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hintHelpers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTroveGetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "troveNFT", data: BytesLike): Result;
}

export interface IAddressesRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IAddressesRegistry;
  waitForDeployment(): Promise<this>;

  interface: IAddressesRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CCR: TypedContractMethod<[], [bigint], "nonpayable">;

  LIQUIDATION_PENALTY_REDISTRIBUTION: TypedContractMethod<
    [],
    [bigint],
    "nonpayable"
  >;

  LIQUIDATION_PENALTY_SP: TypedContractMethod<[], [bigint], "nonpayable">;

  MCR: TypedContractMethod<[], [bigint], "nonpayable">;

  SCR: TypedContractMethod<[], [bigint], "nonpayable">;

  WETH: TypedContractMethod<[], [string], "nonpayable">;

  activePool: TypedContractMethod<[], [string], "view">;

  boldToken: TypedContractMethod<[], [string], "view">;

  borrowerOperations: TypedContractMethod<[], [string], "view">;

  collSurplusPool: TypedContractMethod<[], [string], "view">;

  collToken: TypedContractMethod<[], [string], "view">;

  collateralRegistry: TypedContractMethod<[], [string], "view">;

  defaultPool: TypedContractMethod<[], [string], "view">;

  gasPoolAddress: TypedContractMethod<[], [string], "view">;

  hintHelpers: TypedContractMethod<[], [string], "view">;

  interestRouter: TypedContractMethod<[], [string], "view">;

  metadataNFT: TypedContractMethod<[], [string], "view">;

  multiTroveGetter: TypedContractMethod<[], [string], "view">;

  priceFeed: TypedContractMethod<[], [string], "view">;

  setAddresses: TypedContractMethod<
    [_vars: IAddressesRegistry.AddressVarsStruct],
    [void],
    "nonpayable"
  >;

  sortedTroves: TypedContractMethod<[], [string], "view">;

  stabilityPool: TypedContractMethod<[], [string], "view">;

  troveManager: TypedContractMethod<[], [string], "view">;

  troveNFT: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CCR"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "LIQUIDATION_PENALTY_REDISTRIBUTION"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "LIQUIDATION_PENALTY_SP"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "MCR"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "SCR"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "activePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boldToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrowerOperations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collSurplusPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasPoolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hintHelpers"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "interestRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "metadataNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multiTroveGetter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [_vars: IAddressesRegistry.AddressVarsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sortedTroves"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stabilityPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "troveManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "troveNFT"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
