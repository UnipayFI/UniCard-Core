/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDefaultPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activePoolAddress"
      | "decreaseBoldDebt"
      | "getBoldDebt"
      | "getCollBalance"
      | "increaseBoldDebt"
      | "receiveColl"
      | "sendCollToActivePool"
      | "troveManagerAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBoldDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoldDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBoldDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveColl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCollToActivePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManagerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBoldDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoldDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBoldDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendCollToActivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManagerAddress",
    data: BytesLike
  ): Result;
}

export interface IDefaultPool extends BaseContract {
  connect(runner?: ContractRunner | null): IDefaultPool;
  waitForDeployment(): Promise<this>;

  interface: IDefaultPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activePoolAddress: TypedContractMethod<[], [string], "view">;

  decreaseBoldDebt: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBoldDebt: TypedContractMethod<[], [bigint], "view">;

  getCollBalance: TypedContractMethod<[], [bigint], "view">;

  increaseBoldDebt: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  receiveColl: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendCollToActivePool: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  troveManagerAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activePoolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decreaseBoldDebt"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBoldDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseBoldDebt"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receiveColl"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendCollToActivePool"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "troveManagerAddress"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
