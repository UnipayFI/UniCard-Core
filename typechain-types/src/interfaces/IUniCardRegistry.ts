/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IUniCardRegistry {
  export type CommitmentStruct = {
    productCode: string;
    holder: AddressLike;
    paymentToken: AddressLike;
    nonce: BigNumberish;
  };

  export type CommitmentStructOutput = [
    productCode: string,
    holder: string,
    paymentToken: string,
    nonce: bigint
  ] & {
    productCode: string;
    holder: string;
    paymentToken: string;
    nonce: bigint;
  };

  export type ConfirmationStruct = {
    productCode: string;
    holder: AddressLike;
    paymentToken: AddressLike;
    nonce: BigNumberish;
    commitment: BytesLike;
    requestTxHash: string;
  };

  export type ConfirmationStructOutput = [
    productCode: string,
    holder: string,
    paymentToken: string,
    nonce: bigint,
    commitment: string,
    requestTxHash: string
  ] & {
    productCode: string;
    holder: string;
    paymentToken: string;
    nonce: bigint;
    commitment: string;
    requestTxHash: string;
  };
}

export interface IUniCardRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitments"
      | "confirmations"
      | "hasAdminRole"
      | "hasControllerRole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CardOpenConfirmation" | "CardOpenRequest"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasControllerRole",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasControllerRole",
    data: BytesLike
  ): Result;
}

export namespace CardOpenConfirmationEvent {
  export type InputTuple = [
    holder: AddressLike,
    paymentToken: AddressLike,
    nonce: BigNumberish,
    commitment: BytesLike,
    requestTxHash: string
  ];
  export type OutputTuple = [
    holder: string,
    paymentToken: string,
    nonce: bigint,
    commitment: string,
    requestTxHash: string
  ];
  export interface OutputObject {
    holder: string;
    paymentToken: string;
    nonce: bigint;
    commitment: string;
    requestTxHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CardOpenRequestEvent {
  export type InputTuple = [
    holder: AddressLike,
    paymentToken: AddressLike,
    nonce: BigNumberish,
    amount: BigNumberish,
    productCode: string,
    inviteCode: string,
    referralCode: string,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    holder: string,
    paymentToken: string,
    nonce: bigint,
    amount: bigint,
    productCode: string,
    inviteCode: string,
    referralCode: string,
    commitment: string
  ];
  export interface OutputObject {
    holder: string;
    paymentToken: string;
    nonce: bigint;
    amount: bigint;
    productCode: string;
    inviteCode: string;
    referralCode: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUniCardRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IUniCardRegistry;
  waitForDeployment(): Promise<this>;

  interface: IUniCardRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitments: TypedContractMethod<
    [commitment: BytesLike],
    [IUniCardRegistry.CommitmentStructOutput],
    "view"
  >;

  confirmations: TypedContractMethod<
    [confirmation: BytesLike],
    [IUniCardRegistry.ConfirmationStructOutput],
    "view"
  >;

  hasAdminRole: TypedContractMethod<
    [anAddress: AddressLike],
    [boolean],
    "view"
  >;

  hasControllerRole: TypedContractMethod<
    [anAddress: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<
    [commitment: BytesLike],
    [IUniCardRegistry.CommitmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "confirmations"
  ): TypedContractMethod<
    [confirmation: BytesLike],
    [IUniCardRegistry.ConfirmationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAdminRole"
  ): TypedContractMethod<[anAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasControllerRole"
  ): TypedContractMethod<[anAddress: AddressLike], [boolean], "view">;

  getEvent(
    key: "CardOpenConfirmation"
  ): TypedContractEvent<
    CardOpenConfirmationEvent.InputTuple,
    CardOpenConfirmationEvent.OutputTuple,
    CardOpenConfirmationEvent.OutputObject
  >;
  getEvent(
    key: "CardOpenRequest"
  ): TypedContractEvent<
    CardOpenRequestEvent.InputTuple,
    CardOpenRequestEvent.OutputTuple,
    CardOpenRequestEvent.OutputObject
  >;

  filters: {
    "CardOpenConfirmation(address,address,uint256,bytes32,string)": TypedContractEvent<
      CardOpenConfirmationEvent.InputTuple,
      CardOpenConfirmationEvent.OutputTuple,
      CardOpenConfirmationEvent.OutputObject
    >;
    CardOpenConfirmation: TypedContractEvent<
      CardOpenConfirmationEvent.InputTuple,
      CardOpenConfirmationEvent.OutputTuple,
      CardOpenConfirmationEvent.OutputObject
    >;

    "CardOpenRequest(address,address,uint256,uint256,string,string,string,bytes32)": TypedContractEvent<
      CardOpenRequestEvent.InputTuple,
      CardOpenRequestEvent.OutputTuple,
      CardOpenRequestEvent.OutputObject
    >;
    CardOpenRequest: TypedContractEvent<
      CardOpenRequestEvent.InputTuple,
      CardOpenRequestEvent.OutputTuple,
      CardOpenRequestEvent.OutputObject
    >;
  };
}
