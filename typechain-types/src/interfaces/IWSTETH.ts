/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IWSTETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getStETHByWstETH"
      | "getWstETHByStETH"
      | "stEthPerToken"
      | "tokensPerStEth"
      | "unwrap"
      | "wrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStETHByWstETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWstETHByStETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stEthPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPerStEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wrap", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "getStETHByWstETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWstETHByStETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stEthPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPerStEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
}

export interface IWSTETH extends BaseContract {
  connect(runner?: ContractRunner | null): IWSTETH;
  waitForDeployment(): Promise<this>;

  interface: IWSTETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStETHByWstETH: TypedContractMethod<
    [_wstETHAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getWstETHByStETH: TypedContractMethod<
    [_stETHAmount: BigNumberish],
    [bigint],
    "view"
  >;

  stEthPerToken: TypedContractMethod<[], [bigint], "view">;

  tokensPerStEth: TypedContractMethod<[], [bigint], "view">;

  unwrap: TypedContractMethod<
    [_wstETHAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  wrap: TypedContractMethod<
    [_stETHAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStETHByWstETH"
  ): TypedContractMethod<[_wstETHAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWstETHByStETH"
  ): TypedContractMethod<[_stETHAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "stEthPerToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensPerStEth"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unwrap"
  ): TypedContractMethod<[_wstETHAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "wrap"
  ): TypedContractMethod<[_stETHAmount: BigNumberish], [bigint], "nonpayable">;

  filters: {};
}
