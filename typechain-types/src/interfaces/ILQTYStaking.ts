/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ILQTYStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPendingBoldGain"
      | "getPendingETHGain"
      | "increaseF_ETH"
      | "increaseF_bold"
      | "setAddresses"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPendingBoldGain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingETHGain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_ETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_bold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPendingBoldGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingETHGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_bold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export interface ILQTYStaking extends BaseContract {
  connect(runner?: ContractRunner | null): ILQTYStaking;
  waitForDeployment(): Promise<this>;

  interface: ILQTYStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPendingBoldGain: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getPendingETHGain: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  increaseF_ETH: TypedContractMethod<
    [_ETHFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseF_bold: TypedContractMethod<
    [_LQTYFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAddresses: TypedContractMethod<
    [
      _lqtyTokenAddress: AddressLike,
      _boldTokenAddress: AddressLike,
      _troveManagerAddress: AddressLike,
      _borrowerOperationsAddress: AddressLike,
      _activePoolAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[_LQTYamount: BigNumberish], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [_LQTYamount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPendingBoldGain"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingETHGain"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseF_ETH"
  ): TypedContractMethod<[_ETHFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseF_bold"
  ): TypedContractMethod<[_LQTYFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddresses"
  ): TypedContractMethod<
    [
      _lqtyTokenAddress: AddressLike,
      _boldTokenAddress: AddressLike,
      _troveManagerAddress: AddressLike,
      _borrowerOperationsAddress: AddressLike,
      _activePoolAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[_LQTYamount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[_LQTYamount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
