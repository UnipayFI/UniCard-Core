/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface ITroveEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BatchUpdated"
      | "BatchedTroveUpdated"
      | "Liquidation"
      | "Redemption"
      | "RedemptionFeePaidToTrove"
      | "TroveOperation"
      | "TroveUpdated"
  ): EventFragment;
}

export namespace BatchUpdatedEvent {
  export type InputTuple = [
    _interestBatchManager: AddressLike,
    _operation: BigNumberish,
    _debt: BigNumberish,
    _coll: BigNumberish,
    _annualInterestRate: BigNumberish,
    _annualManagementFee: BigNumberish,
    _totalDebtShares: BigNumberish,
    _debtIncreaseFromUpfrontFee: BigNumberish
  ];
  export type OutputTuple = [
    _interestBatchManager: string,
    _operation: bigint,
    _debt: bigint,
    _coll: bigint,
    _annualInterestRate: bigint,
    _annualManagementFee: bigint,
    _totalDebtShares: bigint,
    _debtIncreaseFromUpfrontFee: bigint
  ];
  export interface OutputObject {
    _interestBatchManager: string;
    _operation: bigint;
    _debt: bigint;
    _coll: bigint;
    _annualInterestRate: bigint;
    _annualManagementFee: bigint;
    _totalDebtShares: bigint;
    _debtIncreaseFromUpfrontFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchedTroveUpdatedEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _interestBatchManager: AddressLike,
    _batchDebtShares: BigNumberish,
    _coll: BigNumberish,
    _stake: BigNumberish,
    _snapshotOfTotalCollRedist: BigNumberish,
    _snapshotOfTotalDebtRedist: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _interestBatchManager: string,
    _batchDebtShares: bigint,
    _coll: bigint,
    _stake: bigint,
    _snapshotOfTotalCollRedist: bigint,
    _snapshotOfTotalDebtRedist: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _interestBatchManager: string;
    _batchDebtShares: bigint;
    _coll: bigint;
    _stake: bigint;
    _snapshotOfTotalCollRedist: bigint;
    _snapshotOfTotalDebtRedist: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    _debtOffsetBySP: BigNumberish,
    _debtRedistributed: BigNumberish,
    _boldGasCompensation: BigNumberish,
    _collGasCompensation: BigNumberish,
    _collSentToSP: BigNumberish,
    _collRedistributed: BigNumberish,
    _collSurplus: BigNumberish,
    _L_ETH: BigNumberish,
    _L_boldDebt: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _debtOffsetBySP: bigint,
    _debtRedistributed: bigint,
    _boldGasCompensation: bigint,
    _collGasCompensation: bigint,
    _collSentToSP: bigint,
    _collRedistributed: bigint,
    _collSurplus: bigint,
    _L_ETH: bigint,
    _L_boldDebt: bigint,
    _price: bigint
  ];
  export interface OutputObject {
    _debtOffsetBySP: bigint;
    _debtRedistributed: bigint;
    _boldGasCompensation: bigint;
    _collGasCompensation: bigint;
    _collSentToSP: bigint;
    _collRedistributed: bigint;
    _collSurplus: bigint;
    _L_ETH: bigint;
    _L_boldDebt: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionEvent {
  export type InputTuple = [
    _attemptedBoldAmount: BigNumberish,
    _actualBoldAmount: BigNumberish,
    _ETHSent: BigNumberish,
    _ETHFee: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _attemptedBoldAmount: bigint,
    _actualBoldAmount: bigint,
    _ETHSent: bigint,
    _ETHFee: bigint,
    _price: bigint
  ];
  export interface OutputObject {
    _attemptedBoldAmount: bigint;
    _actualBoldAmount: bigint;
    _ETHSent: bigint;
    _ETHFee: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionFeePaidToTroveEvent {
  export type InputTuple = [_troveId: BigNumberish, _ETHFee: BigNumberish];
  export type OutputTuple = [_troveId: bigint, _ETHFee: bigint];
  export interface OutputObject {
    _troveId: bigint;
    _ETHFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveOperationEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _operation: BigNumberish,
    _annualInterestRate: BigNumberish,
    _debtIncreaseFromRedist: BigNumberish,
    _debtIncreaseFromUpfrontFee: BigNumberish,
    _debtChangeFromOperation: BigNumberish,
    _collIncreaseFromRedist: BigNumberish,
    _collChangeFromOperation: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _operation: bigint,
    _annualInterestRate: bigint,
    _debtIncreaseFromRedist: bigint,
    _debtIncreaseFromUpfrontFee: bigint,
    _debtChangeFromOperation: bigint,
    _collIncreaseFromRedist: bigint,
    _collChangeFromOperation: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _operation: bigint;
    _annualInterestRate: bigint;
    _debtIncreaseFromRedist: bigint;
    _debtIncreaseFromUpfrontFee: bigint;
    _debtChangeFromOperation: bigint;
    _collIncreaseFromRedist: bigint;
    _collChangeFromOperation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveUpdatedEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _debt: BigNumberish,
    _coll: BigNumberish,
    _stake: BigNumberish,
    _annualInterestRate: BigNumberish,
    _snapshotOfTotalCollRedist: BigNumberish,
    _snapshotOfTotalDebtRedist: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _debt: bigint,
    _coll: bigint,
    _stake: bigint,
    _annualInterestRate: bigint,
    _snapshotOfTotalCollRedist: bigint,
    _snapshotOfTotalDebtRedist: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _debt: bigint;
    _coll: bigint;
    _stake: bigint;
    _annualInterestRate: bigint;
    _snapshotOfTotalCollRedist: bigint;
    _snapshotOfTotalDebtRedist: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITroveEvents extends BaseContract {
  connect(runner?: ContractRunner | null): ITroveEvents;
  waitForDeployment(): Promise<this>;

  interface: ITroveEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BatchUpdated"
  ): TypedContractEvent<
    BatchUpdatedEvent.InputTuple,
    BatchUpdatedEvent.OutputTuple,
    BatchUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchedTroveUpdated"
  ): TypedContractEvent<
    BatchedTroveUpdatedEvent.InputTuple,
    BatchedTroveUpdatedEvent.OutputTuple,
    BatchedTroveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "Redemption"
  ): TypedContractEvent<
    RedemptionEvent.InputTuple,
    RedemptionEvent.OutputTuple,
    RedemptionEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionFeePaidToTrove"
  ): TypedContractEvent<
    RedemptionFeePaidToTroveEvent.InputTuple,
    RedemptionFeePaidToTroveEvent.OutputTuple,
    RedemptionFeePaidToTroveEvent.OutputObject
  >;
  getEvent(
    key: "TroveOperation"
  ): TypedContractEvent<
    TroveOperationEvent.InputTuple,
    TroveOperationEvent.OutputTuple,
    TroveOperationEvent.OutputObject
  >;
  getEvent(
    key: "TroveUpdated"
  ): TypedContractEvent<
    TroveUpdatedEvent.InputTuple,
    TroveUpdatedEvent.OutputTuple,
    TroveUpdatedEvent.OutputObject
  >;

  filters: {
    "BatchUpdated(address,uint8,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchUpdatedEvent.InputTuple,
      BatchUpdatedEvent.OutputTuple,
      BatchUpdatedEvent.OutputObject
    >;
    BatchUpdated: TypedContractEvent<
      BatchUpdatedEvent.InputTuple,
      BatchUpdatedEvent.OutputTuple,
      BatchUpdatedEvent.OutputObject
    >;

    "BatchedTroveUpdated(uint256,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchedTroveUpdatedEvent.InputTuple,
      BatchedTroveUpdatedEvent.OutputTuple,
      BatchedTroveUpdatedEvent.OutputObject
    >;
    BatchedTroveUpdated: TypedContractEvent<
      BatchedTroveUpdatedEvent.InputTuple,
      BatchedTroveUpdatedEvent.OutputTuple,
      BatchedTroveUpdatedEvent.OutputObject
    >;

    "Liquidation(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "Redemption(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;
    Redemption: TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;

    "RedemptionFeePaidToTrove(uint256,uint256)": TypedContractEvent<
      RedemptionFeePaidToTroveEvent.InputTuple,
      RedemptionFeePaidToTroveEvent.OutputTuple,
      RedemptionFeePaidToTroveEvent.OutputObject
    >;
    RedemptionFeePaidToTrove: TypedContractEvent<
      RedemptionFeePaidToTroveEvent.InputTuple,
      RedemptionFeePaidToTroveEvent.OutputTuple,
      RedemptionFeePaidToTroveEvent.OutputObject
    >;

    "TroveOperation(uint256,uint8,uint256,uint256,uint256,int256,uint256,int256)": TypedContractEvent<
      TroveOperationEvent.InputTuple,
      TroveOperationEvent.OutputTuple,
      TroveOperationEvent.OutputObject
    >;
    TroveOperation: TypedContractEvent<
      TroveOperationEvent.InputTuple,
      TroveOperationEvent.OutputTuple,
      TroveOperationEvent.OutputObject
    >;

    "TroveUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TroveUpdatedEvent.InputTuple,
      TroveUpdatedEvent.OutputTuple,
      TroveUpdatedEvent.OutputObject
    >;
    TroveUpdated: TypedContractEvent<
      TroveUpdatedEvent.InputTuple,
      TroveUpdatedEvent.OutputTuple,
      TroveUpdatedEvent.OutputObject
    >;
  };
}
