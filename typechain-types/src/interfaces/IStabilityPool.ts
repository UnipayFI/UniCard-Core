/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IStabilityPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "P"
      | "activePool"
      | "boldToken"
      | "claimAllCollGains"
      | "currentEpoch"
      | "currentScale"
      | "deposits"
      | "epochToScaleToB"
      | "epochToScaleToS"
      | "getCollBalance"
      | "getCompoundedBoldDeposit"
      | "getDepositorCollGain"
      | "getDepositorYieldGain"
      | "getDepositorYieldGainWithPending"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "getTotalBoldDeposits"
      | "getYieldGainsOwed"
      | "getYieldGainsPending"
      | "offset"
      | "provideToSP"
      | "stashedColl"
      | "triggerBoldRewards"
      | "troveManager"
      | "withdrawFromSP"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "P", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAllCollGains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "epochToScaleToB",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochToScaleToS",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundedBoldDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorCollGain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorYieldGain",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorYieldGainWithPending",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBoldDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldGainsOwed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldGainsPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provideToSP",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stashedColl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerBoldRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromSP",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "P", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boldToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllCollGains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochToScaleToB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochToScaleToS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedBoldDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorCollGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorYieldGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorYieldGainWithPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBoldDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldGainsOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldGainsPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stashedColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerBoldRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromSP",
    data: BytesLike
  ): Result;
}

export interface IStabilityPool extends BaseContract {
  connect(runner?: ContractRunner | null): IStabilityPool;
  waitForDeployment(): Promise<this>;

  interface: IStabilityPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  P: TypedContractMethod<[], [bigint], "view">;

  activePool: TypedContractMethod<[], [string], "view">;

  boldToken: TypedContractMethod<[], [string], "view">;

  claimAllCollGains: TypedContractMethod<[], [void], "nonpayable">;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentScale: TypedContractMethod<[], [bigint], "view">;

  deposits: TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;

  epochToScaleToB: TypedContractMethod<
    [_epoch: BigNumberish, _scale: BigNumberish],
    [bigint],
    "view"
  >;

  epochToScaleToS: TypedContractMethod<
    [_epoch: BigNumberish, _scale: BigNumberish],
    [bigint],
    "view"
  >;

  getCollBalance: TypedContractMethod<[], [bigint], "view">;

  getCompoundedBoldDeposit: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  getDepositorCollGain: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  getDepositorYieldGain: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  getDepositorYieldGainWithPending: TypedContractMethod<
    [_depositor: AddressLike],
    [bigint],
    "view"
  >;

  getEntireSystemColl: TypedContractMethod<[], [bigint], "view">;

  getEntireSystemDebt: TypedContractMethod<[], [bigint], "view">;

  getTotalBoldDeposits: TypedContractMethod<[], [bigint], "view">;

  getYieldGainsOwed: TypedContractMethod<[], [bigint], "view">;

  getYieldGainsPending: TypedContractMethod<[], [bigint], "view">;

  offset: TypedContractMethod<
    [_debt: BigNumberish, _coll: BigNumberish],
    [void],
    "nonpayable"
  >;

  provideToSP: TypedContractMethod<
    [_amount: BigNumberish, _doClaim: boolean],
    [void],
    "nonpayable"
  >;

  stashedColl: TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;

  triggerBoldRewards: TypedContractMethod<
    [_boldYield: BigNumberish],
    [void],
    "nonpayable"
  >;

  troveManager: TypedContractMethod<[], [string], "view">;

  withdrawFromSP: TypedContractMethod<
    [_amount: BigNumberish, doClaim: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "P"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boldToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimAllCollGains"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochToScaleToB"
  ): TypedContractMethod<
    [_epoch: BigNumberish, _scale: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochToScaleToS"
  ): TypedContractMethod<
    [_epoch: BigNumberish, _scale: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCompoundedBoldDeposit"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositorCollGain"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositorYieldGain"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositorYieldGainWithPending"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemColl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBoldDeposits"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldGainsOwed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldGainsPending"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offset"
  ): TypedContractMethod<
    [_debt: BigNumberish, _coll: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "provideToSP"
  ): TypedContractMethod<
    [_amount: BigNumberish, _doClaim: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stashedColl"
  ): TypedContractMethod<[_depositor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "triggerBoldRewards"
  ): TypedContractMethod<[_boldYield: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "troveManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFromSP"
  ): TypedContractMethod<
    [_amount: BigNumberish, doClaim: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
