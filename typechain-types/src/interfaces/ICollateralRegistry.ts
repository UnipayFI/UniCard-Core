/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICollateralRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "baseRate"
      | "boldToken"
      | "getEffectiveRedemptionFeeInBold"
      | "getRedemptionFeeWithDecay"
      | "getRedemptionRate"
      | "getRedemptionRateForRedeemedAmount"
      | "getRedemptionRateWithDecay"
      | "getToken"
      | "getTroveManager"
      | "lastFeeOperationTime"
      | "redeemCollateral"
      | "totalCollaterals"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "boldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEffectiveRedemptionFeeInBold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFeeWithDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRateForRedeemedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRateWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeOperationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCollateral",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollaterals",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "baseRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boldToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEffectiveRedemptionFeeInBold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRateForRedeemedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTroveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeOperationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollaterals",
    data: BytesLike
  ): Result;
}

export interface ICollateralRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ICollateralRegistry;
  waitForDeployment(): Promise<this>;

  interface: ICollateralRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  baseRate: TypedContractMethod<[], [bigint], "view">;

  boldToken: TypedContractMethod<[], [string], "view">;

  getEffectiveRedemptionFeeInBold: TypedContractMethod<
    [_redeemAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRedemptionFeeWithDecay: TypedContractMethod<
    [_ETHDrawn: BigNumberish],
    [bigint],
    "view"
  >;

  getRedemptionRate: TypedContractMethod<[], [bigint], "view">;

  getRedemptionRateForRedeemedAmount: TypedContractMethod<
    [_redeemAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRedemptionRateWithDecay: TypedContractMethod<[], [bigint], "view">;

  getToken: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getTroveManager: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  lastFeeOperationTime: TypedContractMethod<[], [bigint], "view">;

  redeemCollateral: TypedContractMethod<
    [
      _boldamount: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFeePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  totalCollaterals: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "baseRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "boldToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEffectiveRedemptionFeeInBold"
  ): TypedContractMethod<[_redeemAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRedemptionFeeWithDecay"
  ): TypedContractMethod<[_ETHDrawn: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRedemptionRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRedemptionRateForRedeemedAmount"
  ): TypedContractMethod<[_redeemAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRedemptionRateWithDecay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTroveManager"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "lastFeeOperationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemCollateral"
  ): TypedContractMethod<
    [
      _boldamount: BigNumberish,
      _maxIterations: BigNumberish,
      _maxFeePercentage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalCollaterals"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
