/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ISortedTrovesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batches"
      | "borrowerOperationsAddress"
      | "contains"
      | "findInsertPosition"
      | "getFirst"
      | "getLast"
      | "getNext"
      | "getPrev"
      | "getSize"
      | "insert"
      | "insertIntoBatch"
      | "isBatchedNode"
      | "isEmpty"
      | "isEmptyBatch"
      | "nodes"
      | "reInsert"
      | "reInsertBatch"
      | "remove"
      | "removeFromBatch"
      | "size"
      | "troveManager"
      | "validInsertPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batches",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findInsertPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFirst", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrev",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertIntoBatch",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isBatchedNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isEmpty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEmptyBatch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reInsert",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reInsertBatch",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "size", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validInsertPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInsertPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insertIntoBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBatchedNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEmptyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reInsert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reInsertBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validInsertPosition",
    data: BytesLike
  ): Result;
}

export interface ISortedTroves extends BaseContract {
  connect(runner?: ContractRunner | null): ISortedTroves;
  waitForDeployment(): Promise<this>;

  interface: ISortedTrovesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batches: TypedContractMethod<
    [_id: AddressLike],
    [[bigint, bigint] & { head: bigint; tail: bigint }],
    "view"
  >;

  borrowerOperationsAddress: TypedContractMethod<[], [string], "view">;

  contains: TypedContractMethod<[_id: BigNumberish], [boolean], "view">;

  findInsertPosition: TypedContractMethod<
    [
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  getFirst: TypedContractMethod<[], [bigint], "view">;

  getLast: TypedContractMethod<[], [bigint], "view">;

  getNext: TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  getPrev: TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  getSize: TypedContractMethod<[], [bigint], "view">;

  insert: TypedContractMethod<
    [
      _id: BigNumberish,
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  insertIntoBatch: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _batchId: AddressLike,
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isBatchedNode: TypedContractMethod<[_id: BigNumberish], [boolean], "view">;

  isEmpty: TypedContractMethod<[], [boolean], "view">;

  isEmptyBatch: TypedContractMethod<[_id: AddressLike], [boolean], "view">;

  nodes: TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, bigint, string, boolean] & {
        nextId: bigint;
        prevId: bigint;
        batchId: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  reInsert: TypedContractMethod<
    [
      _id: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  reInsertBatch: TypedContractMethod<
    [
      _id: AddressLike,
      _newAnnualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  remove: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  removeFromBatch: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  size: TypedContractMethod<[], [bigint], "view">;

  troveManager: TypedContractMethod<[], [string], "view">;

  validInsertPosition: TypedContractMethod<
    [
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [_id: AddressLike],
    [[bigint, bigint] & { head: bigint; tail: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowerOperationsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "findInsertPosition"
  ): TypedContractMethod<
    [
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFirst"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNext"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrev"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "insert"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertIntoBatch"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _batchId: AddressLike,
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBatchedNode"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEmpty"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEmptyBatch"
  ): TypedContractMethod<[_id: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nodes"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [bigint, bigint, string, boolean] & {
        nextId: bigint;
        prevId: bigint;
        batchId: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reInsert"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reInsertBatch"
  ): TypedContractMethod<
    [
      _id: AddressLike,
      _newAnnualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromBatch"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "size"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "troveManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "validInsertPosition"
  ): TypedContractMethod<
    [
      _annualInterestRate: BigNumberish,
      _prevId: BigNumberish,
      _nextId: BigNumberish
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
