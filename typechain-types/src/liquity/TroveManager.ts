/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type LatestBatchDataStruct = {
  entireDebtWithoutRedistribution: BigNumberish;
  entireCollWithoutRedistribution: BigNumberish;
  accruedInterest: BigNumberish;
  recordedDebt: BigNumberish;
  annualInterestRate: BigNumberish;
  weightedRecordedDebt: BigNumberish;
  annualManagementFee: BigNumberish;
  accruedManagementFee: BigNumberish;
  weightedRecordedBatchManagementFee: BigNumberish;
  lastDebtUpdateTime: BigNumberish;
  lastInterestRateAdjTime: BigNumberish;
};

export type LatestBatchDataStructOutput = [
  entireDebtWithoutRedistribution: bigint,
  entireCollWithoutRedistribution: bigint,
  accruedInterest: bigint,
  recordedDebt: bigint,
  annualInterestRate: bigint,
  weightedRecordedDebt: bigint,
  annualManagementFee: bigint,
  accruedManagementFee: bigint,
  weightedRecordedBatchManagementFee: bigint,
  lastDebtUpdateTime: bigint,
  lastInterestRateAdjTime: bigint
] & {
  entireDebtWithoutRedistribution: bigint;
  entireCollWithoutRedistribution: bigint;
  accruedInterest: bigint;
  recordedDebt: bigint;
  annualInterestRate: bigint;
  weightedRecordedDebt: bigint;
  annualManagementFee: bigint;
  accruedManagementFee: bigint;
  weightedRecordedBatchManagementFee: bigint;
  lastDebtUpdateTime: bigint;
  lastInterestRateAdjTime: bigint;
};

export type LatestTroveDataStruct = {
  entireDebt: BigNumberish;
  entireColl: BigNumberish;
  redistBoldDebtGain: BigNumberish;
  redistCollGain: BigNumberish;
  accruedInterest: BigNumberish;
  recordedDebt: BigNumberish;
  annualInterestRate: BigNumberish;
  weightedRecordedDebt: BigNumberish;
  accruedBatchManagementFee: BigNumberish;
  lastInterestRateAdjTime: BigNumberish;
};

export type LatestTroveDataStructOutput = [
  entireDebt: bigint,
  entireColl: bigint,
  redistBoldDebtGain: bigint,
  redistCollGain: bigint,
  accruedInterest: bigint,
  recordedDebt: bigint,
  annualInterestRate: bigint,
  weightedRecordedDebt: bigint,
  accruedBatchManagementFee: bigint,
  lastInterestRateAdjTime: bigint
] & {
  entireDebt: bigint;
  entireColl: bigint;
  redistBoldDebtGain: bigint;
  redistCollGain: bigint;
  accruedInterest: bigint;
  recordedDebt: bigint;
  annualInterestRate: bigint;
  weightedRecordedDebt: bigint;
  accruedBatchManagementFee: bigint;
  lastInterestRateAdjTime: bigint;
};

export type TroveChangeStruct = {
  appliedRedistBoldDebtGain: BigNumberish;
  appliedRedistCollGain: BigNumberish;
  collIncrease: BigNumberish;
  collDecrease: BigNumberish;
  debtIncrease: BigNumberish;
  debtDecrease: BigNumberish;
  newWeightedRecordedDebt: BigNumberish;
  oldWeightedRecordedDebt: BigNumberish;
  upfrontFee: BigNumberish;
  batchAccruedManagementFee: BigNumberish;
  newWeightedRecordedBatchManagementFee: BigNumberish;
  oldWeightedRecordedBatchManagementFee: BigNumberish;
};

export type TroveChangeStructOutput = [
  appliedRedistBoldDebtGain: bigint,
  appliedRedistCollGain: bigint,
  collIncrease: bigint,
  collDecrease: bigint,
  debtIncrease: bigint,
  debtDecrease: bigint,
  newWeightedRecordedDebt: bigint,
  oldWeightedRecordedDebt: bigint,
  upfrontFee: bigint,
  batchAccruedManagementFee: bigint,
  newWeightedRecordedBatchManagementFee: bigint,
  oldWeightedRecordedBatchManagementFee: bigint
] & {
  appliedRedistBoldDebtGain: bigint;
  appliedRedistCollGain: bigint;
  collIncrease: bigint;
  collDecrease: bigint;
  debtIncrease: bigint;
  debtDecrease: bigint;
  newWeightedRecordedDebt: bigint;
  oldWeightedRecordedDebt: bigint;
  upfrontFee: bigint;
  batchAccruedManagementFee: bigint;
  newWeightedRecordedBatchManagementFee: bigint;
  oldWeightedRecordedBatchManagementFee: bigint;
};

export declare namespace ITroveManager {
  export type OnSetInterestBatchManagerParamsStruct = {
    troveId: BigNumberish;
    troveColl: BigNumberish;
    troveDebt: BigNumberish;
    troveChange: TroveChangeStruct;
    newBatchAddress: AddressLike;
    newBatchColl: BigNumberish;
    newBatchDebt: BigNumberish;
  };

  export type OnSetInterestBatchManagerParamsStructOutput = [
    troveId: bigint,
    troveColl: bigint,
    troveDebt: bigint,
    troveChange: TroveChangeStructOutput,
    newBatchAddress: string,
    newBatchColl: bigint,
    newBatchDebt: bigint
  ] & {
    troveId: bigint;
    troveColl: bigint;
    troveDebt: bigint;
    troveChange: TroveChangeStructOutput;
    newBatchAddress: string;
    newBatchColl: bigint;
    newBatchDebt: bigint;
  };
}

export interface TroveManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CCR"
      | "Troves"
      | "activePool"
      | "batchIds"
      | "batchLiquidateTroves"
      | "borrowerOperations"
      | "getCurrentICR"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "getLatestBatchData"
      | "getLatestTroveData"
      | "getTroveAnnualInterestRate"
      | "getTroveFromTroveIdsArray"
      | "getTroveIdsCount"
      | "getTroveStatus"
      | "getUnbackedPortionPriceAndRedeemability"
      | "onAdjustTrove"
      | "onAdjustTroveInsideBatch"
      | "onAdjustTroveInterestRate"
      | "onApplyTroveInterest"
      | "onCloseTrove"
      | "onLowerBatchManagerAnnualFee"
      | "onOpenTrove"
      | "onOpenTroveAndJoinBatch"
      | "onRegisterBatchManager"
      | "onRemoveFromBatch"
      | "onSetBatchManagerAnnualInterestRate"
      | "onSetInterestBatchManager"
      | "redeemCollateral"
      | "rewardSnapshots"
      | "setTroveStatusToActive"
      | "shutdown"
      | "shutdownTime"
      | "sortedTroves"
      | "stabilityPool"
      | "troveNFT"
      | "urgentRedemption"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivePoolAddressChanged"
      | "BatchUpdated"
      | "BatchedTroveUpdated"
      | "BoldTokenAddressChanged"
      | "BorrowerOperationsAddressChanged"
      | "CollSurplusPoolAddressChanged"
      | "CollateralRegistryAddressChanged"
      | "DefaultPoolAddressChanged"
      | "GasPoolAddressChanged"
      | "Liquidation"
      | "PriceFeedAddressChanged"
      | "Redemption"
      | "RedemptionFeePaidToTrove"
      | "SortedTrovesAddressChanged"
      | "StabilityPoolAddressChanged"
      | "TroveNFTAddressChanged"
      | "TroveOperation"
      | "TroveUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "CCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "Troves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLiquidateTroves",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentICR",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBatchData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestTroveData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveAnnualInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveFromTroveIdsArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveIdsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnbackedPortionPriceAndRedeemability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onAdjustTrove",
    values: [BigNumberish, BigNumberish, BigNumberish, TroveChangeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onAdjustTroveInsideBatch",
    values: [
      BigNumberish,
      BigNumberish,
      TroveChangeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onAdjustTroveInterestRate",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      TroveChangeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onApplyTroveInterest",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      TroveChangeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onCloseTrove",
    values: [
      BigNumberish,
      TroveChangeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onLowerBatchManagerAnnualFee",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onOpenTrove",
    values: [AddressLike, BigNumberish, TroveChangeStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onOpenTroveAndJoinBatch",
    values: [
      AddressLike,
      BigNumberish,
      TroveChangeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRegisterBatchManager",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onRemoveFromBatch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      TroveChangeStruct,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSetBatchManagerAnnualInterestRate",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSetInterestBatchManager",
    values: [ITroveManager.OnSetInterestBatchManagerParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCollateral",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTroveStatusToActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shutdownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "troveNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "urgentRedemption",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Troves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchLiquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBatchData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestTroveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveAnnualInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveFromTroveIdsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveIdsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnbackedPortionPriceAndRedeemability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAdjustTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAdjustTroveInsideBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAdjustTroveInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onApplyTroveInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onCloseTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onLowerBatchManagerAnnualFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOpenTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOpenTroveAndJoinBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRegisterBatchManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRemoveFromBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSetBatchManagerAnnualInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSetInterestBatchManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTroveStatusToActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "troveNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "urgentRedemption",
    data: BytesLike
  ): Result;
}

export namespace ActivePoolAddressChangedEvent {
  export type InputTuple = [_newActivePoolAddress: AddressLike];
  export type OutputTuple = [_newActivePoolAddress: string];
  export interface OutputObject {
    _newActivePoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchUpdatedEvent {
  export type InputTuple = [
    _interestBatchManager: AddressLike,
    _operation: BigNumberish,
    _debt: BigNumberish,
    _coll: BigNumberish,
    _annualInterestRate: BigNumberish,
    _annualManagementFee: BigNumberish,
    _totalDebtShares: BigNumberish,
    _debtIncreaseFromUpfrontFee: BigNumberish
  ];
  export type OutputTuple = [
    _interestBatchManager: string,
    _operation: bigint,
    _debt: bigint,
    _coll: bigint,
    _annualInterestRate: bigint,
    _annualManagementFee: bigint,
    _totalDebtShares: bigint,
    _debtIncreaseFromUpfrontFee: bigint
  ];
  export interface OutputObject {
    _interestBatchManager: string;
    _operation: bigint;
    _debt: bigint;
    _coll: bigint;
    _annualInterestRate: bigint;
    _annualManagementFee: bigint;
    _totalDebtShares: bigint;
    _debtIncreaseFromUpfrontFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchedTroveUpdatedEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _interestBatchManager: AddressLike,
    _batchDebtShares: BigNumberish,
    _coll: BigNumberish,
    _stake: BigNumberish,
    _snapshotOfTotalCollRedist: BigNumberish,
    _snapshotOfTotalDebtRedist: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _interestBatchManager: string,
    _batchDebtShares: bigint,
    _coll: bigint,
    _stake: bigint,
    _snapshotOfTotalCollRedist: bigint,
    _snapshotOfTotalDebtRedist: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _interestBatchManager: string;
    _batchDebtShares: bigint;
    _coll: bigint;
    _stake: bigint;
    _snapshotOfTotalCollRedist: bigint;
    _snapshotOfTotalDebtRedist: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoldTokenAddressChangedEvent {
  export type InputTuple = [_newBoldTokenAddress: AddressLike];
  export type OutputTuple = [_newBoldTokenAddress: string];
  export interface OutputObject {
    _newBoldTokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowerOperationsAddressChangedEvent {
  export type InputTuple = [_newBorrowerOperationsAddress: AddressLike];
  export type OutputTuple = [_newBorrowerOperationsAddress: string];
  export interface OutputObject {
    _newBorrowerOperationsAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollSurplusPoolAddressChangedEvent {
  export type InputTuple = [_collSurplusPoolAddress: AddressLike];
  export type OutputTuple = [_collSurplusPoolAddress: string];
  export interface OutputObject {
    _collSurplusPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralRegistryAddressChangedEvent {
  export type InputTuple = [_collateralRegistryAddress: AddressLike];
  export type OutputTuple = [_collateralRegistryAddress: string];
  export interface OutputObject {
    _collateralRegistryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultPoolAddressChangedEvent {
  export type InputTuple = [_newDefaultPoolAddress: AddressLike];
  export type OutputTuple = [_newDefaultPoolAddress: string];
  export interface OutputObject {
    _newDefaultPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasPoolAddressChangedEvent {
  export type InputTuple = [_gasPoolAddress: AddressLike];
  export type OutputTuple = [_gasPoolAddress: string];
  export interface OutputObject {
    _gasPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    _debtOffsetBySP: BigNumberish,
    _debtRedistributed: BigNumberish,
    _boldGasCompensation: BigNumberish,
    _collGasCompensation: BigNumberish,
    _collSentToSP: BigNumberish,
    _collRedistributed: BigNumberish,
    _collSurplus: BigNumberish,
    _L_ETH: BigNumberish,
    _L_boldDebt: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _debtOffsetBySP: bigint,
    _debtRedistributed: bigint,
    _boldGasCompensation: bigint,
    _collGasCompensation: bigint,
    _collSentToSP: bigint,
    _collRedistributed: bigint,
    _collSurplus: bigint,
    _L_ETH: bigint,
    _L_boldDebt: bigint,
    _price: bigint
  ];
  export interface OutputObject {
    _debtOffsetBySP: bigint;
    _debtRedistributed: bigint;
    _boldGasCompensation: bigint;
    _collGasCompensation: bigint;
    _collSentToSP: bigint;
    _collRedistributed: bigint;
    _collSurplus: bigint;
    _L_ETH: bigint;
    _L_boldDebt: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedAddressChangedEvent {
  export type InputTuple = [_newPriceFeedAddress: AddressLike];
  export type OutputTuple = [_newPriceFeedAddress: string];
  export interface OutputObject {
    _newPriceFeedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionEvent {
  export type InputTuple = [
    _attemptedBoldAmount: BigNumberish,
    _actualBoldAmount: BigNumberish,
    _ETHSent: BigNumberish,
    _ETHFee: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [
    _attemptedBoldAmount: bigint,
    _actualBoldAmount: bigint,
    _ETHSent: bigint,
    _ETHFee: bigint,
    _price: bigint
  ];
  export interface OutputObject {
    _attemptedBoldAmount: bigint;
    _actualBoldAmount: bigint;
    _ETHSent: bigint;
    _ETHFee: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionFeePaidToTroveEvent {
  export type InputTuple = [_troveId: BigNumberish, _ETHFee: BigNumberish];
  export type OutputTuple = [_troveId: bigint, _ETHFee: bigint];
  export interface OutputObject {
    _troveId: bigint;
    _ETHFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SortedTrovesAddressChangedEvent {
  export type InputTuple = [_sortedTrovesAddress: AddressLike];
  export type OutputTuple = [_sortedTrovesAddress: string];
  export interface OutputObject {
    _sortedTrovesAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StabilityPoolAddressChangedEvent {
  export type InputTuple = [_stabilityPoolAddress: AddressLike];
  export type OutputTuple = [_stabilityPoolAddress: string];
  export interface OutputObject {
    _stabilityPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveNFTAddressChangedEvent {
  export type InputTuple = [_newTroveNFTAddress: AddressLike];
  export type OutputTuple = [_newTroveNFTAddress: string];
  export interface OutputObject {
    _newTroveNFTAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveOperationEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _operation: BigNumberish,
    _annualInterestRate: BigNumberish,
    _debtIncreaseFromRedist: BigNumberish,
    _debtIncreaseFromUpfrontFee: BigNumberish,
    _debtChangeFromOperation: BigNumberish,
    _collIncreaseFromRedist: BigNumberish,
    _collChangeFromOperation: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _operation: bigint,
    _annualInterestRate: bigint,
    _debtIncreaseFromRedist: bigint,
    _debtIncreaseFromUpfrontFee: bigint,
    _debtChangeFromOperation: bigint,
    _collIncreaseFromRedist: bigint,
    _collChangeFromOperation: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _operation: bigint;
    _annualInterestRate: bigint;
    _debtIncreaseFromRedist: bigint;
    _debtIncreaseFromUpfrontFee: bigint;
    _debtChangeFromOperation: bigint;
    _collIncreaseFromRedist: bigint;
    _collChangeFromOperation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveUpdatedEvent {
  export type InputTuple = [
    _troveId: BigNumberish,
    _debt: BigNumberish,
    _coll: BigNumberish,
    _stake: BigNumberish,
    _annualInterestRate: BigNumberish,
    _snapshotOfTotalCollRedist: BigNumberish,
    _snapshotOfTotalDebtRedist: BigNumberish
  ];
  export type OutputTuple = [
    _troveId: bigint,
    _debt: bigint,
    _coll: bigint,
    _stake: bigint,
    _annualInterestRate: bigint,
    _snapshotOfTotalCollRedist: bigint,
    _snapshotOfTotalDebtRedist: bigint
  ];
  export interface OutputObject {
    _troveId: bigint;
    _debt: bigint;
    _coll: bigint;
    _stake: bigint;
    _annualInterestRate: bigint;
    _snapshotOfTotalCollRedist: bigint;
    _snapshotOfTotalDebtRedist: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TroveManager extends BaseContract {
  connect(runner?: ContractRunner | null): TroveManager;
  waitForDeployment(): Promise<this>;

  interface: TroveManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CCR: TypedContractMethod<[], [bigint], "view">;

  Troves: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        debt: bigint;
        coll: bigint;
        stake: bigint;
        status: bigint;
        arrayIndex: bigint;
        lastDebtUpdateTime: bigint;
        lastInterestRateAdjTime: bigint;
        annualInterestRate: bigint;
        interestBatchManager: string;
        batchDebtShares: bigint;
      }
    ],
    "view"
  >;

  activePool: TypedContractMethod<[], [string], "view">;

  batchIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  batchLiquidateTroves: TypedContractMethod<
    [_troveArray: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  borrowerOperations: TypedContractMethod<[], [string], "view">;

  getCurrentICR: TypedContractMethod<
    [_troveId: BigNumberish, _price: BigNumberish],
    [bigint],
    "view"
  >;

  getEntireSystemColl: TypedContractMethod<[], [bigint], "view">;

  getEntireSystemDebt: TypedContractMethod<[], [bigint], "view">;

  getLatestBatchData: TypedContractMethod<
    [_batchAddress: AddressLike],
    [LatestBatchDataStructOutput],
    "view"
  >;

  getLatestTroveData: TypedContractMethod<
    [_troveId: BigNumberish],
    [LatestTroveDataStructOutput],
    "view"
  >;

  getTroveAnnualInterestRate: TypedContractMethod<
    [_troveId: BigNumberish],
    [bigint],
    "view"
  >;

  getTroveFromTroveIdsArray: TypedContractMethod<
    [_index: BigNumberish],
    [bigint],
    "view"
  >;

  getTroveIdsCount: TypedContractMethod<[], [bigint], "view">;

  getTroveStatus: TypedContractMethod<
    [_troveId: BigNumberish],
    [bigint],
    "view"
  >;

  getUnbackedPortionPriceAndRedeemability: TypedContractMethod<
    [],
    [[bigint, bigint, boolean]],
    "nonpayable"
  >;

  onAdjustTrove: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;

  onAdjustTroveInsideBatch: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onAdjustTroveInterestRate: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;

  onApplyTroveInterest: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _newTroveDebt: BigNumberish,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;

  onCloseTrove: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onLowerBatchManagerAnnualFee: TypedContractMethod<
    [
      _batchAddress: AddressLike,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualManagementFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onOpenTrove: TypedContractMethod<
    [
      _owner: AddressLike,
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _annualInterestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onOpenTroveAndJoinBatch: TypedContractMethod<
    [
      _owner: AddressLike,
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _batchColl: BigNumberish,
      _batchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onRegisterBatchManager: TypedContractMethod<
    [
      _account: AddressLike,
      _annualInterestRate: BigNumberish,
      _annualManagementFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onRemoveFromBatch: TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _newTroveDebt: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onSetBatchManagerAnnualInterestRate: TypedContractMethod<
    [
      _batchAddress: AddressLike,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _upfrontFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  onSetInterestBatchManager: TypedContractMethod<
    [_params: ITroveManager.OnSetInterestBatchManagerParamsStruct],
    [void],
    "nonpayable"
  >;

  redeemCollateral: TypedContractMethod<
    [
      _redeemer: AddressLike,
      _boldamount: BigNumberish,
      _price: BigNumberish,
      _redemptionRate: BigNumberish,
      _maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  rewardSnapshots: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { coll: bigint; boldDebt: bigint }],
    "view"
  >;

  setTroveStatusToActive: TypedContractMethod<
    [_troveId: BigNumberish],
    [void],
    "nonpayable"
  >;

  shutdown: TypedContractMethod<[], [void], "nonpayable">;

  shutdownTime: TypedContractMethod<[], [bigint], "view">;

  sortedTroves: TypedContractMethod<[], [string], "view">;

  stabilityPool: TypedContractMethod<[], [string], "view">;

  troveNFT: TypedContractMethod<[], [string], "view">;

  urgentRedemption: TypedContractMethod<
    [
      _boldAmount: BigNumberish,
      _troveIds: BigNumberish[],
      _minCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CCR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "Troves"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        debt: bigint;
        coll: bigint;
        stake: bigint;
        status: bigint;
        arrayIndex: bigint;
        lastDebtUpdateTime: bigint;
        lastInterestRateAdjTime: bigint;
        annualInterestRate: bigint;
        interestBatchManager: string;
        batchDebtShares: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "activePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "batchLiquidateTroves"
  ): TypedContractMethod<[_troveArray: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowerOperations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentICR"
  ): TypedContractMethod<
    [_troveId: BigNumberish, _price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEntireSystemColl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemDebt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestBatchData"
  ): TypedContractMethod<
    [_batchAddress: AddressLike],
    [LatestBatchDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestTroveData"
  ): TypedContractMethod<
    [_troveId: BigNumberish],
    [LatestTroveDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTroveAnnualInterestRate"
  ): TypedContractMethod<[_troveId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveFromTroveIdsArray"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveIdsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTroveStatus"
  ): TypedContractMethod<[_troveId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnbackedPortionPriceAndRedeemability"
  ): TypedContractMethod<[], [[bigint, bigint, boolean]], "nonpayable">;
  getFunction(
    nameOrSignature: "onAdjustTrove"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onAdjustTroveInsideBatch"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onAdjustTroveInterestRate"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onApplyTroveInterest"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _newTroveDebt: BigNumberish,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish,
      _troveChange: TroveChangeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onCloseTrove"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onLowerBatchManagerAnnualFee"
  ): TypedContractMethod<
    [
      _batchAddress: AddressLike,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualManagementFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOpenTrove"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _annualInterestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOpenTroveAndJoinBatch"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _troveId: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _batchColl: BigNumberish,
      _batchDebt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRegisterBatchManager"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _annualInterestRate: BigNumberish,
      _annualManagementFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRemoveFromBatch"
  ): TypedContractMethod<
    [
      _troveId: BigNumberish,
      _newTroveColl: BigNumberish,
      _newTroveDebt: BigNumberish,
      _troveChange: TroveChangeStruct,
      _batchAddress: AddressLike,
      _newBatchColl: BigNumberish,
      _newBatchDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onSetBatchManagerAnnualInterestRate"
  ): TypedContractMethod<
    [
      _batchAddress: AddressLike,
      _newColl: BigNumberish,
      _newDebt: BigNumberish,
      _newAnnualInterestRate: BigNumberish,
      _upfrontFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onSetInterestBatchManager"
  ): TypedContractMethod<
    [_params: ITroveManager.OnSetInterestBatchManagerParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemCollateral"
  ): TypedContractMethod<
    [
      _redeemer: AddressLike,
      _boldamount: BigNumberish,
      _price: BigNumberish,
      _redemptionRate: BigNumberish,
      _maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardSnapshots"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { coll: bigint; boldDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTroveStatusToActive"
  ): TypedContractMethod<[_troveId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shutdown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shutdownTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sortedTroves"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stabilityPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "troveNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "urgentRedemption"
  ): TypedContractMethod<
    [
      _boldAmount: BigNumberish,
      _troveIds: BigNumberish[],
      _minCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActivePoolAddressChanged"
  ): TypedContractEvent<
    ActivePoolAddressChangedEvent.InputTuple,
    ActivePoolAddressChangedEvent.OutputTuple,
    ActivePoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "BatchUpdated"
  ): TypedContractEvent<
    BatchUpdatedEvent.InputTuple,
    BatchUpdatedEvent.OutputTuple,
    BatchUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchedTroveUpdated"
  ): TypedContractEvent<
    BatchedTroveUpdatedEvent.InputTuple,
    BatchedTroveUpdatedEvent.OutputTuple,
    BatchedTroveUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BoldTokenAddressChanged"
  ): TypedContractEvent<
    BoldTokenAddressChangedEvent.InputTuple,
    BoldTokenAddressChangedEvent.OutputTuple,
    BoldTokenAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowerOperationsAddressChanged"
  ): TypedContractEvent<
    BorrowerOperationsAddressChangedEvent.InputTuple,
    BorrowerOperationsAddressChangedEvent.OutputTuple,
    BorrowerOperationsAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollSurplusPoolAddressChanged"
  ): TypedContractEvent<
    CollSurplusPoolAddressChangedEvent.InputTuple,
    CollSurplusPoolAddressChangedEvent.OutputTuple,
    CollSurplusPoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralRegistryAddressChanged"
  ): TypedContractEvent<
    CollateralRegistryAddressChangedEvent.InputTuple,
    CollateralRegistryAddressChangedEvent.OutputTuple,
    CollateralRegistryAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultPoolAddressChanged"
  ): TypedContractEvent<
    DefaultPoolAddressChangedEvent.InputTuple,
    DefaultPoolAddressChangedEvent.OutputTuple,
    DefaultPoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "GasPoolAddressChanged"
  ): TypedContractEvent<
    GasPoolAddressChangedEvent.InputTuple,
    GasPoolAddressChangedEvent.OutputTuple,
    GasPoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedAddressChanged"
  ): TypedContractEvent<
    PriceFeedAddressChangedEvent.InputTuple,
    PriceFeedAddressChangedEvent.OutputTuple,
    PriceFeedAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "Redemption"
  ): TypedContractEvent<
    RedemptionEvent.InputTuple,
    RedemptionEvent.OutputTuple,
    RedemptionEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionFeePaidToTrove"
  ): TypedContractEvent<
    RedemptionFeePaidToTroveEvent.InputTuple,
    RedemptionFeePaidToTroveEvent.OutputTuple,
    RedemptionFeePaidToTroveEvent.OutputObject
  >;
  getEvent(
    key: "SortedTrovesAddressChanged"
  ): TypedContractEvent<
    SortedTrovesAddressChangedEvent.InputTuple,
    SortedTrovesAddressChangedEvent.OutputTuple,
    SortedTrovesAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "StabilityPoolAddressChanged"
  ): TypedContractEvent<
    StabilityPoolAddressChangedEvent.InputTuple,
    StabilityPoolAddressChangedEvent.OutputTuple,
    StabilityPoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "TroveNFTAddressChanged"
  ): TypedContractEvent<
    TroveNFTAddressChangedEvent.InputTuple,
    TroveNFTAddressChangedEvent.OutputTuple,
    TroveNFTAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "TroveOperation"
  ): TypedContractEvent<
    TroveOperationEvent.InputTuple,
    TroveOperationEvent.OutputTuple,
    TroveOperationEvent.OutputObject
  >;
  getEvent(
    key: "TroveUpdated"
  ): TypedContractEvent<
    TroveUpdatedEvent.InputTuple,
    TroveUpdatedEvent.OutputTuple,
    TroveUpdatedEvent.OutputObject
  >;

  filters: {
    "ActivePoolAddressChanged(address)": TypedContractEvent<
      ActivePoolAddressChangedEvent.InputTuple,
      ActivePoolAddressChangedEvent.OutputTuple,
      ActivePoolAddressChangedEvent.OutputObject
    >;
    ActivePoolAddressChanged: TypedContractEvent<
      ActivePoolAddressChangedEvent.InputTuple,
      ActivePoolAddressChangedEvent.OutputTuple,
      ActivePoolAddressChangedEvent.OutputObject
    >;

    "BatchUpdated(address,uint8,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchUpdatedEvent.InputTuple,
      BatchUpdatedEvent.OutputTuple,
      BatchUpdatedEvent.OutputObject
    >;
    BatchUpdated: TypedContractEvent<
      BatchUpdatedEvent.InputTuple,
      BatchUpdatedEvent.OutputTuple,
      BatchUpdatedEvent.OutputObject
    >;

    "BatchedTroveUpdated(uint256,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BatchedTroveUpdatedEvent.InputTuple,
      BatchedTroveUpdatedEvent.OutputTuple,
      BatchedTroveUpdatedEvent.OutputObject
    >;
    BatchedTroveUpdated: TypedContractEvent<
      BatchedTroveUpdatedEvent.InputTuple,
      BatchedTroveUpdatedEvent.OutputTuple,
      BatchedTroveUpdatedEvent.OutputObject
    >;

    "BoldTokenAddressChanged(address)": TypedContractEvent<
      BoldTokenAddressChangedEvent.InputTuple,
      BoldTokenAddressChangedEvent.OutputTuple,
      BoldTokenAddressChangedEvent.OutputObject
    >;
    BoldTokenAddressChanged: TypedContractEvent<
      BoldTokenAddressChangedEvent.InputTuple,
      BoldTokenAddressChangedEvent.OutputTuple,
      BoldTokenAddressChangedEvent.OutputObject
    >;

    "BorrowerOperationsAddressChanged(address)": TypedContractEvent<
      BorrowerOperationsAddressChangedEvent.InputTuple,
      BorrowerOperationsAddressChangedEvent.OutputTuple,
      BorrowerOperationsAddressChangedEvent.OutputObject
    >;
    BorrowerOperationsAddressChanged: TypedContractEvent<
      BorrowerOperationsAddressChangedEvent.InputTuple,
      BorrowerOperationsAddressChangedEvent.OutputTuple,
      BorrowerOperationsAddressChangedEvent.OutputObject
    >;

    "CollSurplusPoolAddressChanged(address)": TypedContractEvent<
      CollSurplusPoolAddressChangedEvent.InputTuple,
      CollSurplusPoolAddressChangedEvent.OutputTuple,
      CollSurplusPoolAddressChangedEvent.OutputObject
    >;
    CollSurplusPoolAddressChanged: TypedContractEvent<
      CollSurplusPoolAddressChangedEvent.InputTuple,
      CollSurplusPoolAddressChangedEvent.OutputTuple,
      CollSurplusPoolAddressChangedEvent.OutputObject
    >;

    "CollateralRegistryAddressChanged(address)": TypedContractEvent<
      CollateralRegistryAddressChangedEvent.InputTuple,
      CollateralRegistryAddressChangedEvent.OutputTuple,
      CollateralRegistryAddressChangedEvent.OutputObject
    >;
    CollateralRegistryAddressChanged: TypedContractEvent<
      CollateralRegistryAddressChangedEvent.InputTuple,
      CollateralRegistryAddressChangedEvent.OutputTuple,
      CollateralRegistryAddressChangedEvent.OutputObject
    >;

    "DefaultPoolAddressChanged(address)": TypedContractEvent<
      DefaultPoolAddressChangedEvent.InputTuple,
      DefaultPoolAddressChangedEvent.OutputTuple,
      DefaultPoolAddressChangedEvent.OutputObject
    >;
    DefaultPoolAddressChanged: TypedContractEvent<
      DefaultPoolAddressChangedEvent.InputTuple,
      DefaultPoolAddressChangedEvent.OutputTuple,
      DefaultPoolAddressChangedEvent.OutputObject
    >;

    "GasPoolAddressChanged(address)": TypedContractEvent<
      GasPoolAddressChangedEvent.InputTuple,
      GasPoolAddressChangedEvent.OutputTuple,
      GasPoolAddressChangedEvent.OutputObject
    >;
    GasPoolAddressChanged: TypedContractEvent<
      GasPoolAddressChangedEvent.InputTuple,
      GasPoolAddressChangedEvent.OutputTuple,
      GasPoolAddressChangedEvent.OutputObject
    >;

    "Liquidation(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "PriceFeedAddressChanged(address)": TypedContractEvent<
      PriceFeedAddressChangedEvent.InputTuple,
      PriceFeedAddressChangedEvent.OutputTuple,
      PriceFeedAddressChangedEvent.OutputObject
    >;
    PriceFeedAddressChanged: TypedContractEvent<
      PriceFeedAddressChangedEvent.InputTuple,
      PriceFeedAddressChangedEvent.OutputTuple,
      PriceFeedAddressChangedEvent.OutputObject
    >;

    "Redemption(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;
    Redemption: TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;

    "RedemptionFeePaidToTrove(uint256,uint256)": TypedContractEvent<
      RedemptionFeePaidToTroveEvent.InputTuple,
      RedemptionFeePaidToTroveEvent.OutputTuple,
      RedemptionFeePaidToTroveEvent.OutputObject
    >;
    RedemptionFeePaidToTrove: TypedContractEvent<
      RedemptionFeePaidToTroveEvent.InputTuple,
      RedemptionFeePaidToTroveEvent.OutputTuple,
      RedemptionFeePaidToTroveEvent.OutputObject
    >;

    "SortedTrovesAddressChanged(address)": TypedContractEvent<
      SortedTrovesAddressChangedEvent.InputTuple,
      SortedTrovesAddressChangedEvent.OutputTuple,
      SortedTrovesAddressChangedEvent.OutputObject
    >;
    SortedTrovesAddressChanged: TypedContractEvent<
      SortedTrovesAddressChangedEvent.InputTuple,
      SortedTrovesAddressChangedEvent.OutputTuple,
      SortedTrovesAddressChangedEvent.OutputObject
    >;

    "StabilityPoolAddressChanged(address)": TypedContractEvent<
      StabilityPoolAddressChangedEvent.InputTuple,
      StabilityPoolAddressChangedEvent.OutputTuple,
      StabilityPoolAddressChangedEvent.OutputObject
    >;
    StabilityPoolAddressChanged: TypedContractEvent<
      StabilityPoolAddressChangedEvent.InputTuple,
      StabilityPoolAddressChangedEvent.OutputTuple,
      StabilityPoolAddressChangedEvent.OutputObject
    >;

    "TroveNFTAddressChanged(address)": TypedContractEvent<
      TroveNFTAddressChangedEvent.InputTuple,
      TroveNFTAddressChangedEvent.OutputTuple,
      TroveNFTAddressChangedEvent.OutputObject
    >;
    TroveNFTAddressChanged: TypedContractEvent<
      TroveNFTAddressChangedEvent.InputTuple,
      TroveNFTAddressChangedEvent.OutputTuple,
      TroveNFTAddressChangedEvent.OutputObject
    >;

    "TroveOperation(uint256,uint8,uint256,uint256,uint256,int256,uint256,int256)": TypedContractEvent<
      TroveOperationEvent.InputTuple,
      TroveOperationEvent.OutputTuple,
      TroveOperationEvent.OutputObject
    >;
    TroveOperation: TypedContractEvent<
      TroveOperationEvent.InputTuple,
      TroveOperationEvent.OutputTuple,
      TroveOperationEvent.OutputObject
    >;

    "TroveUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TroveUpdatedEvent.InputTuple,
      TroveUpdatedEvent.OutputTuple,
      TroveUpdatedEvent.OutputObject
    >;
    TroveUpdated: TypedContractEvent<
      TroveUpdatedEvent.InputTuple,
      TroveUpdatedEvent.OutputTuple,
      TroveUpdatedEvent.OutputObject
    >;
  };
}
