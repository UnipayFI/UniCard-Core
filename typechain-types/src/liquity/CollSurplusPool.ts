/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CollSurplusPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "accountSurplus"
      | "borrowerOperationsAddress"
      | "claimColl"
      | "collToken"
      | "getCollBalance"
      | "getCollateral"
      | "troveManagerAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerOperationsAddressChanged"
      | "CollBalanceUpdated"
      | "CollSent"
      | "TroveManagerAddressChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountSurplus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimColl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "collToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManagerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimColl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManagerAddress",
    data: BytesLike
  ): Result;
}

export namespace BorrowerOperationsAddressChangedEvent {
  export type InputTuple = [_newBorrowerOperationsAddress: AddressLike];
  export type OutputTuple = [_newBorrowerOperationsAddress: string];
  export interface OutputObject {
    _newBorrowerOperationsAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollBalanceUpdatedEvent {
  export type InputTuple = [_account: AddressLike, _newBalance: BigNumberish];
  export type OutputTuple = [_account: string, _newBalance: bigint];
  export interface OutputObject {
    _account: string;
    _newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollSentEvent {
  export type InputTuple = [_to: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_to: string, _amount: bigint];
  export interface OutputObject {
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TroveManagerAddressChangedEvent {
  export type InputTuple = [_newTroveManagerAddress: AddressLike];
  export type OutputTuple = [_newTroveManagerAddress: string];
  export interface OutputObject {
    _newTroveManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CollSurplusPool extends BaseContract {
  connect(runner?: ContractRunner | null): CollSurplusPool;
  waitForDeployment(): Promise<this>;

  interface: CollSurplusPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  accountSurplus: TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  borrowerOperationsAddress: TypedContractMethod<[], [string], "view">;

  claimColl: TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;

  collToken: TypedContractMethod<[], [string], "view">;

  getCollBalance: TypedContractMethod<[], [bigint], "view">;

  getCollateral: TypedContractMethod<[_account: AddressLike], [bigint], "view">;

  troveManagerAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountSurplus"
  ): TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowerOperationsAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimColl"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateral"
  ): TypedContractMethod<[_account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "troveManagerAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BorrowerOperationsAddressChanged"
  ): TypedContractEvent<
    BorrowerOperationsAddressChangedEvent.InputTuple,
    BorrowerOperationsAddressChangedEvent.OutputTuple,
    BorrowerOperationsAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "CollBalanceUpdated"
  ): TypedContractEvent<
    CollBalanceUpdatedEvent.InputTuple,
    CollBalanceUpdatedEvent.OutputTuple,
    CollBalanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollSent"
  ): TypedContractEvent<
    CollSentEvent.InputTuple,
    CollSentEvent.OutputTuple,
    CollSentEvent.OutputObject
  >;
  getEvent(
    key: "TroveManagerAddressChanged"
  ): TypedContractEvent<
    TroveManagerAddressChangedEvent.InputTuple,
    TroveManagerAddressChangedEvent.OutputTuple,
    TroveManagerAddressChangedEvent.OutputObject
  >;

  filters: {
    "BorrowerOperationsAddressChanged(address)": TypedContractEvent<
      BorrowerOperationsAddressChangedEvent.InputTuple,
      BorrowerOperationsAddressChangedEvent.OutputTuple,
      BorrowerOperationsAddressChangedEvent.OutputObject
    >;
    BorrowerOperationsAddressChanged: TypedContractEvent<
      BorrowerOperationsAddressChangedEvent.InputTuple,
      BorrowerOperationsAddressChangedEvent.OutputTuple,
      BorrowerOperationsAddressChangedEvent.OutputObject
    >;

    "CollBalanceUpdated(address,uint256)": TypedContractEvent<
      CollBalanceUpdatedEvent.InputTuple,
      CollBalanceUpdatedEvent.OutputTuple,
      CollBalanceUpdatedEvent.OutputObject
    >;
    CollBalanceUpdated: TypedContractEvent<
      CollBalanceUpdatedEvent.InputTuple,
      CollBalanceUpdatedEvent.OutputTuple,
      CollBalanceUpdatedEvent.OutputObject
    >;

    "CollSent(address,uint256)": TypedContractEvent<
      CollSentEvent.InputTuple,
      CollSentEvent.OutputTuple,
      CollSentEvent.OutputObject
    >;
    CollSent: TypedContractEvent<
      CollSentEvent.InputTuple,
      CollSentEvent.OutputTuple,
      CollSentEvent.OutputObject
    >;

    "TroveManagerAddressChanged(address)": TypedContractEvent<
      TroveManagerAddressChangedEvent.InputTuple,
      TroveManagerAddressChangedEvent.OutputTuple,
      TroveManagerAddressChangedEvent.OutputObject
    >;
    TroveManagerAddressChanged: TypedContractEvent<
      TroveManagerAddressChangedEvent.InputTuple,
      TroveManagerAddressChangedEvent.OutputTuple,
      TroveManagerAddressChangedEvent.OutputObject
    >;
  };
}
