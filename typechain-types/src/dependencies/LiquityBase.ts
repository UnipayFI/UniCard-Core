/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LiquityBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activePool"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivePoolAddressChanged"
      | "DefaultPoolAddressChanged"
      | "PriceFeedAddressChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
}

export namespace ActivePoolAddressChangedEvent {
  export type InputTuple = [_newActivePoolAddress: AddressLike];
  export type OutputTuple = [_newActivePoolAddress: string];
  export interface OutputObject {
    _newActivePoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultPoolAddressChangedEvent {
  export type InputTuple = [_newDefaultPoolAddress: AddressLike];
  export type OutputTuple = [_newDefaultPoolAddress: string];
  export interface OutputObject {
    _newDefaultPoolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceFeedAddressChangedEvent {
  export type InputTuple = [_newPriceFeedAddress: AddressLike];
  export type OutputTuple = [_newPriceFeedAddress: string];
  export interface OutputObject {
    _newPriceFeedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquityBase extends BaseContract {
  connect(runner?: ContractRunner | null): LiquityBase;
  waitForDeployment(): Promise<this>;

  interface: LiquityBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activePool: TypedContractMethod<[], [string], "view">;

  getEntireSystemColl: TypedContractMethod<[], [bigint], "view">;

  getEntireSystemDebt: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemColl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEntireSystemDebt"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ActivePoolAddressChanged"
  ): TypedContractEvent<
    ActivePoolAddressChangedEvent.InputTuple,
    ActivePoolAddressChangedEvent.OutputTuple,
    ActivePoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultPoolAddressChanged"
  ): TypedContractEvent<
    DefaultPoolAddressChangedEvent.InputTuple,
    DefaultPoolAddressChangedEvent.OutputTuple,
    DefaultPoolAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "PriceFeedAddressChanged"
  ): TypedContractEvent<
    PriceFeedAddressChangedEvent.InputTuple,
    PriceFeedAddressChangedEvent.OutputTuple,
    PriceFeedAddressChangedEvent.OutputObject
  >;

  filters: {
    "ActivePoolAddressChanged(address)": TypedContractEvent<
      ActivePoolAddressChangedEvent.InputTuple,
      ActivePoolAddressChangedEvent.OutputTuple,
      ActivePoolAddressChangedEvent.OutputObject
    >;
    ActivePoolAddressChanged: TypedContractEvent<
      ActivePoolAddressChangedEvent.InputTuple,
      ActivePoolAddressChangedEvent.OutputTuple,
      ActivePoolAddressChangedEvent.OutputObject
    >;

    "DefaultPoolAddressChanged(address)": TypedContractEvent<
      DefaultPoolAddressChangedEvent.InputTuple,
      DefaultPoolAddressChangedEvent.OutputTuple,
      DefaultPoolAddressChangedEvent.OutputObject
    >;
    DefaultPoolAddressChanged: TypedContractEvent<
      DefaultPoolAddressChangedEvent.InputTuple,
      DefaultPoolAddressChangedEvent.OutputTuple,
      DefaultPoolAddressChangedEvent.OutputObject
    >;

    "PriceFeedAddressChanged(address)": TypedContractEvent<
      PriceFeedAddressChangedEvent.InputTuple,
      PriceFeedAddressChangedEvent.OutputTuple,
      PriceFeedAddressChangedEvent.OutputObject
    >;
    PriceFeedAddressChanged: TypedContractEvent<
      PriceFeedAddressChangedEvent.InputTuple,
      PriceFeedAddressChangedEvent.OutputTuple,
      PriceFeedAddressChangedEvent.OutputObject
    >;
  };
}
